package main

import (
	"log"
	"os"
	"path"
	"path/filepath"
	"sort"
	"text/template"
	"time"
)

const markdownTemplate = `# Project Manifest
> Note: Tag list includes any aliases and all tags. Order doesn't indicate
> assocation. See image through associated link to hub.docker.com for details.

{{ range $image := . }}
### [{{ $image.Header }}](https://hub.docker.com/r/{{ $image.Header }}/)

**Available tags:**
{{ range $tag := $image.Tags }}
- {{ $tag }}{{ end }}
{{ end }}

_Last updated: {{ now }}_

---
**Auto-generated by [imagend](https://github.com/jmervine/imagend) version {{ version }}**
`

type tmplImage struct {
	Image  string
	Tag    string
	Parent string
}

type tmplData []struct {
	Header string
	Tags   []string
}

func manifest2markdown(file string) {
	log.Println("loading manifest:", file)
	m := loadManifest(file)
	order, sets := m.sort()
	data := make(tmplData, len(order))

	for i, key := range order {
		for _, ver := range sets[key] {
			if data[i].Header == "" {
				data[i].Header = ver.imageName()
			}
			data[i].Tags = append(data[i].Tags, ver.tags()...)
		}

		sort.Sort(sort.Reverse(sort.StringSlice(data[i].Tags)))
	}

	var err error
	target := path.Join(outdir, "manifest.md")
	target, err = filepath.Abs(target)
	if err != nil {
		panic(err)
	}

	f, err := os.Create(target)
	if err != nil {
		panic(err)
	}

	t := template.New("markdown")
	t.Funcs(template.FuncMap{"now": now, "version": pversion})

	tmpl := template.Must(t.Parse(markdownTemplate))
	err = tmpl.Execute(f, data)
	if err != nil {
		panic(err)
	}

	log.Println("--- rendered:", target)
}

func now() string {
	return time.Now().UTC().String()
}

func pversion() string {
	return VERSION
}
